@startuml
title Auth sequence diagram in use case 'Desktop only'

skinparam actorStyle awesome
actor Client
participant "Installed\n BankId security \nWindows or\nMacOS App " as BankIdApp order 15
participant "Relying Party(RP)\nApp with RP-cert.\nin 'key store'\nand server-cert.\nin 'trust store'" as RP order 10
database "BankIp server \n with web service API\nHost:appapi2.bankid.com" as BankServer order 30
Client -> RP: ordering a service \nrequiring authentication

==User step 1: Selection by User of identification method.==
activate RP
Client <-> RP: selection of authentication by BankId App
RP -> BankServer: POST auth request to endpoint /rp/v5.1/auth HTTP/1.1\n with 'endUserIp' and any not required params

activate BankServer
RP <-- BankServer: response with\n'autoStartToken', 'orderRef', 'qrStartToken', 'qrStartSecret'

==User step 2: Suggestion to use mobile BankID security App or installed on this device.==
note over Client, RP
 Generation of a dynamic QR code every second with pattern
 bankid.qrStartToken.time.qrAuthCode(time,qrStartSecret)
end note
Client <-> RP: selection of authentication method \nwith BankId security App on this device
note over Client, RP
 Stop generation of a dynamic QR code
end note

==User step 3: Browser dialog 'Do you want to open BankID Security Application?'==
Client <-> RP: request permission to open BankID \nsecutity App on this device
RP -> BankIdApp: launching BankIdApp Url:\nbankid:///?autostarttoken=[TOKEN]&\nredirect=[RETURNURL]
note over RP, BankIdApp
 In case of launching failure relevant informing the user
end note

==User step 4: Entering a password in the BankID security App or canceling an operation.==
activate BankIdApp
BankIdApp <--> BankServer: authentication data exchange
Client <-> BankIdApp: password entry to accept \nor canceling order
BankIdApp <--> BankServer: accept/cancel order
Client <-- BankIdApp: order status
deactivate BankIdApp

==User step 5: The user identity is verified unless an exception occurs. Informing the user.==
note over RP, BankServer
 Try to get order status every two seconds
end note
RP -> BankServer: POST collect request to endpoint /rp/v5.1/collect HTTP/1.1\nwith 'orderRef'
RP <-- BankServer: response with \n'orderRef', 'status', 'hintCode', 'completionData'
note over RP, BankServer
 In case of auth failure relevant informing the user
end note
deactivate BankServer

Client <- RP: informing about successful authentication\nand request to orders with e-signature
deactivate RP

@enduml